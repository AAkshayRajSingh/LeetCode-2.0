class Solution {
public:
    int solve(vector<int> & prices,int index,int buy,int profit){
        if(index>=prices.size())
            return 0;
        if(buy==1){
            profit=max(((-prices[index])+solve(prices,index+1,0,profit)),(0+solve(prices,index+1,1,profit)));
        }
        else{

            profit=max(((prices[index])+solve(prices,index+1,1,profit)),(0+solve(prices,index+1,0,profit)));
        }
        return profit;
    }
    int solveMem(vector<int> & prices,int index,int buy,int profit,vector<vector<int>> &dp){
        if(index>=prices.size())
            return 0;
        if(dp[index][buy]!=-1) return dp[index][buy];
        if(buy==1){
            profit=max(((-prices[index])+solveMem(prices,index+1,0,profit,dp)),(0+solveMem(prices,index+1,1,profit,dp)));
        }
        else{

            profit=max(((prices[index])+solveMem(prices,index+1,1,profit,dp)),(0+solveMem(prices,index+1,0,profit,dp)));
        }
        return dp[index][buy] = profit;
    }
    int solveTab(vector<int> & prices,int profit){
        vector<vector<int>> dp(prices.size()+2,vector<int>  (2,0));
        int buy=1;
        for(int index=prices.size()-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                 if(buy==1){
                        profit=max(((-prices[index])+dp[index+1][0]),(0+dp[index+1][1]));
                    }
                    else{

                        profit=max(((prices[index])+dp[index+1][1]),(0+dp[index+1][0]));
                    }
                    dp[index][buy] = profit;
                    }
            } 
                return dp[0][1];
    }
     int solveSO(vector<int> & prices,int profit){
        // vector<vector<int>> dp(prices.size()+2,vector<int>  (2,0));
        vector<int> currR(2,0);
        vector<int> nextR(2,0);
        int buy=1;
        for(int index=prices.size()-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                 if(buy==1){
                        profit=max(((-prices[index])+nextR[0]),(0+nextR[1]));
                    }
                    else{

                        profit=max(((prices[index])+nextR[1]),(0+nextR[0]));
                    }
                    currR[buy] = profit;
                    }
                    nextR=currR;
            } 
                return currR[1];
    }
    int maxProfit(vector<int>& prices) {
        int buy=1;
        int profit=0;
        vector<vector<int>> dp(prices.size()+1,vector<int> (3,-1));
        // return solve(prices,0,buy,profit);
        // return solveMem(prices,0,buy,profit,dp);
        // return solveTab(prices,profit);
        return solveSO(prices,profit);
    }
};
