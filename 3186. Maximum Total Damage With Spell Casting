class Solution {
public:
    long long f(int i,int j,vector<pair<long long,long long>> &vec,vector<vector<long long>> &dp){
        if(i==vec.size()) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        long long ans=0;
        if(j==0){
            ans=max(ans,vec[i].first * vec[i].second + f(i+1,1,vec,dp));
            ans=max(ans,f(i+1,0,vec,dp));
        }
        else{
            if(abs(vec[i-j].first-vec[i].first)>=3){
                ans=max(ans,vec[i].first*vec[i].second+f(i+1,1,vec,dp));
            }
            if(j<=4) ans=max(ans,f(i+1,j+1,vec,dp));
        }
        return dp[i][j]=ans;
    } 
    long long maximumTotalDamage(vector<int>& power) {
        map<int,int> mp;
        for(auto a:power) mp[a]++;
        vector<pair<long long,long long>> vec;
        for(auto a: mp){
            vec.push_back({a.first,a.second});
        }
        int n=vec.size();
        vector<vector<long long>> dp(n+1,vector<long long>(6,-1));
        return f(0,0,vec,dp);
    }
};
