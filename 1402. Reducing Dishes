class Solution {
public:
    int solve(vector<int> &satisfaction,int index,int time){
        if(index==satisfaction.size())
            return 0;
    
    int incl=satisfaction[index]*time + solve(satisfaction,index+1,time+1);
    int excl=0+solve(satisfaction,index+1,time);

    return max(incl,excl);
    }
    int solveMem(vector<int> &satisfaction,int index,int time,vector<vector<int>> &dp){
        if(index==satisfaction.size())
            return 0;
        if(dp[index][time]!=-1) return dp[index][time];
        int incl=satisfaction[index]*(time) + solveMem(satisfaction,index+1,time+1,dp);
        int excl=0+solveMem(satisfaction,index+1,time,dp);

        dp[index][time]= max(incl,excl);
        return dp[index][time];
    }
    int solveTab(vector<int> &satisfaction){
        vector<vector<int>> dp(satisfaction.size()+1,vector<int>(satisfaction.size()+1,0));
        int n=satisfaction.size();
        // for(int i=0;i<satisfaction.size();i++){
        //     dp[i][n-1]=0;
        // }
        for(int index=n-1;index>=0;index--){
            for(int time=index;time>=0;time--){
                int incl=satisfaction[index]*(time+1) + dp[index+1][time+1];
                int excl=0+dp[index+1][time];
                dp[index][time]=max(incl,excl);
            }
        }
        return dp[0][0];
    }

        int solveSO(vector<int> &satisfaction){
        // vector<vector<int>> dp(satisfaction.size()+1,vector<int>(satisfaction.size()+1,0));
        vector<int> curr(satisfaction.size()+1,0);
        vector<int> next(satisfaction.size()+1,0);
        int n=satisfaction.size();
        // for(int i=0;i<satisfaction.size();i++){
        //     dp[i][n-1]=0;
        // }
        for(int index=n-1;index>=0;index--){
            for(int time=index;time>=0;time--){
                int incl=satisfaction[index]*(time+1) + next[time+1];
                int excl=0+next[time];
                curr[time]=max(incl,excl);
            }
            next=curr;
        }
        return next[0];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        int ind=satisfaction.size();
        vector<vector<int>> dp(ind+1,vector<int>(ind+1,-1));
        sort(satisfaction.begin(),satisfaction.end());
        int index=0;
        // return solve(satisfaction,index,1);
        // return solveMem(satisfaction,index,1,dp);
        return solveSO(satisfaction);
    }
};
