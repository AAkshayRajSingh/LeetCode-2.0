/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void fillAllConnections(TreeNode* root,unordered_map<int,vector<int>> &mp){
        if(!root)
            return;
        if(root->left){
            mp[root->val].push_back(root->left->val);
            mp[root->left->val].push_back(root->val);
        }
        if(root->right){
            mp[root->val].push_back(root->right->val);
            mp[root->right->val].push_back(root->val);
        }
        fillAllConnections(root->left,mp);
        fillAllConnections(root->right,mp);
    }
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int,vector<int>> mp;
        fillAllConnections(root,mp);
        queue<int> q;
        q.push(start);
        unordered_set<int> visited;
        int minutes=-1;
        while(!q.empty()){
            minutes++;
            for(int levelSize=q.size();levelSize>0;levelSize--){
                int curr=q.front();
                q.pop();
                visited.insert(curr);
                for(int adj:mp[curr]){
                    if(!visited.count(adj)){
                        q.push(adj);
                    }
                }
            }
        }
        return minutes;
    }
};
