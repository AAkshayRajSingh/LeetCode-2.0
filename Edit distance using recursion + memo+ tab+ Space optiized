class Solution {
public:
    int solve(string &a,string &b,int i,int j){
        if(i==a.length())
            return b.length()-j;
        if(j==b.length())
            return a.length()-i;
        int ans=0;
        if(a[i]==b[j])
            ans=solve(a,b,i+1,j+1);
        else{
             //insert
        int ins=1+solve(a,b,i,j+1);
        //delete
        int del=1+solve(a,b,i+1,j);
        //replace
        int rep=1+solve(a,b,i+1,j+1);

        ans=min(ins,min(del,rep));
        }
       return ans;
    }
        int solveMem(string &a,string &b,int i,int j,vector<vector<int>> &dp){
        if(i==a.length())
            return b.length()-j;
        if(j==b.length())
            return a.length()-i;
        if(dp[i][j]!=-1) return dp[i][j];
        int ans=0;
        if(a[i]==b[j])
            ans=solveMem(a,b,i+1,j+1,dp);
        else{
             //insert
        int ins=1+solveMem(a,b,i,j+1,dp);
        //delete
        int del=1+solveMem(a,b,i+1,j,dp);
        //replace
        int rep=1+solveMem(a,b,i+1,j+1,dp);

        ans=min(ins,min(del,rep));
        }
       return dp[i][j]=ans;
    }
            int solveTab(string &a,string &b){
            vector<vector<int>> dp(a.size()+1,vector<int>(b.size()+1,0));
        // if(i==a.length())
        //     return b.length()-j;
        // if(j==b.length())
        //     return a.length()-i;
        for(int i=0;i<a.size();i++){
            dp[i][b.size()]=a.size()-i;
        }
        for(int j=0;j<b.size();j++){
            dp[a.size()][j]=b.size()-j;
        }
        // if(dp[i][j]!=-1) return dp[i][j];
        for(int i=a.size()-1;i>=0;i--){
            for(int j=b.size()-1;j>=0;j--){
                     
        if(a[i]==b[j])
            dp[i][j]=dp[i+1][j+1];
        else{
             //insert
        int ins=1+dp[i][j+1];
        //delete
        int del=1+dp[i+1][j];
        //replace
        int rep=1+dp[i+1][j+1];

        dp[i][j]=min(ins,min(del,rep));
        }
            }
        }
     return dp[0][0];  
    }
    int solveSO(string &a, string &b) {
    vector<int> nextR(b.size() + 1, 0);
    vector<int> currR(b.size() + 1, 0);

    // Initialize the base case (when one string is empty)
    for (int j = 0; j <= b.size(); j++) {
        nextR[j] = b.size() - j;  // Cost of inserting characters to `a`
    }

    // Iterate through the strings in reverse
    for (int i = a.size() - 1; i >= 0; i--) {
        // Fill the current row
        
        for (int j = b.size() - 1; j >= 0; j--) {
            currR[b.length()]=a.size()-i;
            if (a[i] == b[j]) {
                currR[j] = nextR[j + 1];  // Characters match, no operation needed
            } else {
                int ins = 1 + currR[j + 1];  // Insert
                int del = 1 + nextR[j];  // Delete
                int rep = 1 + nextR[j + 1];  // Replace
                currR[j] = min(ins, min(del, rep));  // Take the minimum of the three
            }
        }
        // After finishing one row, update nextR to current row
        nextR = currR;  // Swap rows: nextR becomes currR for the next iteration
    }

    // The answer is now stored in nextR[0]
    return nextR[0];
}

    //             int solveSO(string &a,string &b){
    //         // vector<vector<int>> dp(a.size()+1,vector<int>(b.size()+1,0));
    //         vector<int> nextR(b.size()+1,0);
    //         vector<int> currR(b.size()+1,0);
    //     // if(i==a.length())
    //     //     return b.length()-j;
    //     // if(j==b.length())
    //     //     return a.length()-i;
    //     // for(int i=0;i<a.size();i++){
    //     //     dp[i][b.size()]=a.size()-i;
    //     // }
    //     for(int j=0;j<b.size();j++){
    //         nextR[j]=b.size()-j;
    //     }
    //     // if(dp[i][j]!=-1) return dp[i][j];
    //     for(int i=a.size()-1;i>=0;i--){
    //         for(int j=b.size()-1;j>=0;j--){
                     
    //     if(a[i]==b[j])
    //         currR[j]=nextR[j+1];
    //     else{
    //          //insert
    //     int ins=1+currR[j+1];
    //     //delete
    //     int del=1+nextR[j];
    //     //replace
    //     int rep=1+nextR[j+1];

    //     currR[j]=min(ins,min(del,rep));
    //     }
    //         }
    //         nextR=currR;
    //     }
    //  return nextR[0];  
    // }
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.size()+1,vector<int> (word2.size()+1,-1));
        if((word1.length()==1 && word2.length()==0) || (word1.length()==0 && word2.length()==1)) return 1;
        // return solve(word1,word2,0,0);
        // return solveMem(word1,word2,0,0,dp);
        // return solveTab(word1,word2);
        return solveSO(word1,word2);
    }
};
