class Solution {
public:
    void dfs(unordered_map<int,vector<int>> &mp,int head,set<int> &visited,vector<int> &ans){
        if(visited.find(head)!=visited.end())
            return;
        visited.insert(head);
        ans.push_back(head);
        for(int it:mp[head]){
            dfs(mp,it,visited,ans);
        }
    }
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        unordered_map<int,vector<int>> mp;
        for(auto it:adjacentPairs){
            mp[it[0]].push_back(it[1]);
            mp[it[1]].push_back(it[0]);
        }
        vector<int> ans;
        set<int> visited;
        int head=0;
        for(auto & it:mp){
            if(it.second.size()==1){
                head=it.first;
                break;
            }
        }
        dfs(mp,head,visited,ans);
        return ans;
    }
};
