class Solution {
public:
    bool solveMem(vector<int>&nums,int index,int target,vector<vector<int>> &dp){
        if(target==0)
            return true;
        if(target<0 || index<0)
            return false;
        if(dp[index][target]!=-1) return dp[index][target];
        bool incl=solveMem(nums,index-1,target-nums[index],dp);
        bool excl=solveMem(nums,index-1,target,dp);
        if(incl==true || excl==true)
            dp[index][target]=true;
        else
            dp[index][target]=false;
        return dp[index][target];
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(auto it:nums){
            sum+=it;
        }
        if(sum%2!=0)
            return false;
        int target=sum/2;
        vector<vector<int>> dp(n,vector<int> (target+1,-1));
        return solveMem(nums,n-1,target,dp);
    }
};
