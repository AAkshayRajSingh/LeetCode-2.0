/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> solve(TreeNode* root,int d,int &ans){
        if(!root) return {0};
        if(root->left ==NULL && root->right==NULL) return {1};
        auto left=solve(root->left,d,ans);
        auto right=solve(root->right,d,ans);
        for(auto &a:left){
            for(auto &b:right){
                if((a!=0) && (b!=0) && (a+b<=d)) ans++;
            }
        }
        vector<int> ret;
        for(auto &a:left){
            if((a!=0) && (a+1<d)) ret.push_back(a+1);
        }
        for(auto &b:right){
            if((b!=0) && (b+1<d)) ret.push_back(b+1);
        }
        return ret;
    }
    int countPairs(TreeNode* root, int distance) {
        int ans=0;
        solve(root,distance,ans);
        return ans;
    }
};
