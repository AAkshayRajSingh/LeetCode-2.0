class RandomizedSet {
public:
    set<int> st;
    vector<int> st1;
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        auto it= std::find(st1.begin(),st1.end(),val);
        if(it == st1.end()){
            st1.push_back(val);
            return true;
        }
        return false;
       /* if(st.find(val)==st.end()){
            st.insert(val);
            return true;
        }
        return false;
        */
    }
    
    bool remove(int val) {
        auto it = std::find(st1.begin(),st1.end(),val);
        if(it!=st1.end()){
            st1.erase(it);
            return true;
        }
        return false;
        /*if(st.find(val)!=st.end()){
            st.erase(val);
            return true;
        }
        return false;*/
    }
    
    int getRandom() {
        vector<int> x(st.begin(),st.end());
        int randomIndex = std::rand()%st1.size();
        return st1[randomIndex];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
