class Solution {
public:
    bool isPossible(int i,int j,int n,int m){
        if((i<n && i>=0) && (j<m && j>=0))
            return true;
        return false;
    }
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        
        int n=img.size();
        int m=img[0].size();
        vector<vector<int>> ans(n,vector<int> (m,0));
        for(int i=0;i<img.size();i++){
            for(int j=0;j<img[0].size();j++){
                int count=0;
                int temp=0;
                if(isPossible(i,j,n,m)){
                    count++;
                    temp+=img[i][j];
                }
                //above
                if(isPossible(i-1,j,n,m)){
                    count++;
                    temp+=img[i-1][j];
                }
                //up-left-diag
                if(isPossible(i-1,j-1,n,m)){
                    count++;
                    temp+=img[i-1][j-1];
                }
                //up-right-diag
                if(isPossible(i-1,j+1,n,m)){
                    count++;
                    temp+=img[i-1][j+1];
                }
                //left
                if(isPossible(i,j-1,n,m)){
                    count++;
                    temp+=img[i][j-1];
                }
                //right
                if(isPossible(i,j+1,n,m)){
                    count++;
                    temp+=img[i][j+1];
                }
                //down-left-diag
                if(isPossible(i+1,j-1,n,m)){
                    count++;
                    temp+=img[i+1][j-1];
                }
                //down-right-diag
                if(isPossible(i+1,j+1,n,m)){
                    count++;
                    temp+=img[i+1][j+1];
                }
                //down
                if(isPossible(i+1,j,n,m)){
                    count++;
                    temp+=img[i+1][j];
                }
                ans[i][j]=temp/count;
            }
        }
        return ans;
    }
};
