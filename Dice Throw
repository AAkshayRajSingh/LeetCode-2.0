//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    int solve(int faces,int dice,int target){
        if(target<0)
            return 0;
        if(dice==0 && target!=0)
            return 0;
        if(dice!=0 && target==0)
            return 0;
        if(dice==0 && target==0)
            return 1;
        int ans=0;
        for(int i=1;i<=faces;i++){
            ans= ans+ solve(faces,dice-1,target-i);
        }
        return ans;
    }
    int solveMem(int faces,int dice,int target,vector<vector<int>> &dp){
        if(target<0)
            return 0;
        if(dice==0 && target!=0)
            return 0;
        if(dice!=0 && target==0)
            return 0;
        if(dice==0 && target==0)
            return 1;
        int ans=0;
        if(dp[dice][target]!=-1) return dp[dice][target];
        for(int i=1;i<=faces;i++){
            ans= ans+ solveMem(faces,dice-1,target-i,dp);
        }
        return dp[dice][target]= ans;
    }
    int solveTab(int f,int d,int t){
        vector<vector<int>> dp(d+1,vector<int> (t+1,0));
        dp[0][0]=1;
        for(int dice=1;dice<=d;dice++){
            for(int target=1;target<=t;target++){
                        int ans=0;
                        for(int i=1;i<=f;i++){
                            if(target-i>=0)
                                ans= ans+ dp[dice-1][target-i];
                        }
                        dp[dice][target]= ans;
            }
        }
        return dp[d][t];
        
    }
    int solveSO(int f,int d,int t){
        // vector<vector<int>> dp(d+1,vector<int> (t+1,0));
        vector<int> prev(t+1,0);
        vector<int> curr(t+1,0);
        prev[0]=1;
        for(int dice=1;dice<=d;dice++){
            for(int target=1;target<=t;target++){
                        int ans=0;
                        for(int i=1;i<=f;i++){
                            if(target-i>=0)
                                ans= ans+ prev[target-i];
                        }
                        curr[target]= ans;
            }
            prev=curr;
        }
        return prev[t];
        
    }
    int noOfWays(int m, int n, int x) {
        // code here
        // vector<vector<int>> dp(n+1,vector<int> (x+1,-1));
        // return solve(m,n,x);
        // return solveMem(m,n,x,dp);
        // return solveTab(m,n,x);
        
        return solveSO(m,n,x);
    }
};

//{ Driver Code Starts.
int main() {
    string ts;
    getline(cin, ts);
    int t = stoi(ts);
    while (t--) {
        int m, n, x;
        cin >> m >> n >> x;

        Solution ob;
        cout << ob.noOfWays(m, n, x) << endl;
        cout << "~" << endl;
    }
    return 0;
}
// } Driver Code Ends
