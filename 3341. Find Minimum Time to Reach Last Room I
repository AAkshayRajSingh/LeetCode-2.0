class Solution {
public:
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int m=moveTime.size()-1;
        int n=moveTime[0].size()-1;
        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>> , greater<>> heap;
        heap.push({0,0,0});
        set<pair<int,int>> visited;
        vector<vector<int>> directions = {{0,1},{1,0},{0,-1},{-1,0}};
        while(!heap.empty()){
            auto[time,r,c] = heap.top();
            heap.pop();
            if(r==m && c==n) return time;
            for(auto &dir:directions){
                int row=r+dir[0];
                int col=c+dir[1];
                if(row>=0 && row<=m && col >=0 && col<=n && !visited.count({row,col})){
                    heap.push({max(time,moveTime[row][col])+1,row,col});
                    visited.insert({row,col});
                }
            }
        }
        return -1;
    }
};
