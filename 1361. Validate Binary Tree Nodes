class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        vector<int> indegree(n,0);
        for(int i=0;i<leftChild.size();i++){
            if(leftChild[i]!=-1)
                indegree[leftChild[i]]++;
        }
        for(int i=0;i<rightChild.size();i++){
            if(rightChild[i]!=-1)
                indegree[rightChild[i]]++;
        }
        int root=-1;
        for(int i=0;i<indegree.size();i++){
            if(indegree[i]==0){
                if(root==-1)
                    root=i;
                else
                    return false;
            }
        }
        if(root ==-1) return false;
        vector<bool> visited(n,false);
        queue<int> q;
        q.push(root);
        while(!q.empty()){
            int val=q.front();
            q.pop();
            if(visited[val]==true) return false;
            visited[val]=true;
            if(leftChild[val]!=-1) q.push(leftChild[val]);
            if(rightChild[val]!=-1) q.push(rightChild[val]);
        }
        if(accumulate(visited.begin(),visited.end(),0)==n)
            return true;
        return false;
    }
};
