class Solution {
public:
    int solve(vector<int> &prices,int index,int buy,int limit,int profit){
        if(index>=prices.size())
            return 0;
        if(limit==0)
            return 0;
        if(buy==1)
            {
                profit=max((-prices[index]+solve(prices,index+1,0,limit,profit)),(0+solve(prices,index+1,1,limit,profit)));
            }
        else{
            profit=max((prices[index]+solve(prices,index+1,1,limit-1,profit)),(0+solve(prices,index+1,0,limit,profit)));
        }
        return profit;
    }
    int solveMem(vector<int> &prices,int index,int buy,int limit,int profit,vector<vector<vector<int>>> &dp){
        if(index>=prices.size())
            return 0;
        if(limit==0)
            return 0;
        if(dp[index][buy][limit]!=-1) return dp[index][buy][limit];
        if(buy==1)
            {
                profit=max((-prices[index]+solveMem(prices,index+1,0,limit,profit,dp)),(0+solveMem(prices,index+1,1,limit,profit,dp)));
            }
        else{
            profit=max((prices[index]+solveMem(prices,index+1,1,limit-1,profit,dp)),(0+solveMem(prices,index+1,0,limit,profit,dp)));
        }
        return dp[index][buy][limit]=profit;
    }
     int solveTab(vector<int> &prices,int index,int buy,int limit,int profit){
        vector<vector<vector<int>>> dp (prices.size()+1,vector<vector<int>>(3,vector<int>(3,0)));
        for(int index=prices.size()-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=2;limit>=1;limit--){
                        if(buy==1)
            {
                profit=max((-prices[index]+dp[index+1][0][limit]),(0+dp[index+1][1][limit]));
            }
        else{
            profit=max((prices[index]+dp[index+1][1][limit-1]),(0+dp[index+1][0][limit]));
        }
         dp[index][buy][limit]=profit;
                }
            }
        }
        return dp[0][1][2];
    }
    int solveSO(vector<int> &prices,int index,int buy,int limit,int profit){
        // vector<vector<vector<int>>> dp (prices.size()+1,vector<vector<int>>(3,vector<int>(3,0)));
        vector<vector<int>> next(3,vector<int>(3,0));
        vector<vector<int>> curr(3,vector<int>(3,0));
        for(int index=prices.size()-1;index>=0;index--){
            for(int buy=0;buy<=1;buy++){
                for(int limit=2;limit>=1;limit--){
                        if(buy==1)
            {
                profit=max((-prices[index]+next[0][limit]),(0+next[1][limit]));
            }
        else{
            profit=max((prices[index]+next[1][limit-1]),(0+next[0][limit]));
        }
         curr[buy][limit]=profit;
                }
            }
            next=curr;
        }
        return curr[1][2];
    }
    int maxProfit(vector<int>& prices) {
        int limit=2;
        int buy=1;
        int index=0;
        int profit=0;
        vector<vector<vector<int>>> dp (prices.size()+1,vector<vector<int>>(3,vector<int>(3,-1)));
        // return solve(prices,index,buy,limit,profit);
        //  return solveMem(prices,index,buy,limit,profit,dp);
        // return solveTab(prices,index,buy,limit,profit);
         return solveSO(prices,index,buy,limit,profit);
    }
};
